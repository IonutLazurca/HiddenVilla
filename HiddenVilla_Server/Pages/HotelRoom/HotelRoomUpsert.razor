@page "/hotel-room/create"
@page "/hotel-room/edit/{Id:int}"
@using Models
@using Business.Repository.IRepository
@using HiddenVilla_Server.Service.IService
@inject IHotelRoomRepository HotelRoomRepository
@inject IHotelImagesRepository HotelImagesRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IFileUpload FileUpload


<!--<div class="col col-md-6">

    <div class="row mt-2 mb-5">
        <h3 class="card-title text-info mb-3 ml-3">@Title Hotel Room</h3>
        <div class="col-md-12">
            <div class="card">
                <div class="card-body">
                    <EditForm Model="HotelRoomModel" OnValidSubmit="HandleHotelRoomUpsert">
                        <DataAnnotationsValidator />-->
@*<ValidationSummary />*@
<!--<div class="form-group">
    <label>Name</label>
    <InputText @bind-Value="HotelRoomModel.Name" class="form-control"></InputText>
    <ValidationMessage For="()=>HotelRoomModel.Name"></ValidationMessage>
</div>
<div class="form-group">
    <label>Occupancy</label>
    <InputNumber @bind-Value="HotelRoomModel.Occupancy" class="form-control"></InputNumber>
    <ValidationMessage For="()=>HotelRoomModel.Occupancy"></ValidationMessage>
</div>
<div class="form-group">
    <label>Rate</label>
    <InputNumber @bind-Value="HotelRoomModel.RegularRate" class="form-control"></InputNumber>
    <ValidationMessage For="()=>HotelRoomModel.RegularRate"></ValidationMessage>
</div>
<div class="form-group">
    <label>Sq ft.</label>
    <InputText @bind-Value="HotelRoomModel.SqFt" class="form-control"></InputText>
    <ValidationMessage For="()=>HotelRoomModel.SqFt"></ValidationMessage>
</div>
<div class="form-group">
    <label>Details</label>
    <InputTextArea @bind-Value="HotelRoomModel.Details" class="form-control"></InputTextArea>
    <ValidationMessage For="()=>HotelRoomModel.Details"></ValidationMessage>
</div>-->
@*load new images*@
<!--<div class="form-group">
                            <InputFile OnChange="HandleImageUpload" multiple></InputFile>
                            <div class="row">
                                @if (HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Count > 0)
                                {
                                    int serial = 1;
                                    foreach (var roomImage in HotelRoomModel.ImageUrls)
                                    {
                                        <div class="col-md-2 mt-3">
                                            <div class="room-image" style="background: url('@roomImage') 50% 50%">
                                                <span class="room-image-title">
                                                    @serial
                                                </span>
                                            </div>
                                            <button type="button" class="btn btn-outline-danger btn-block mt-4" @onclick="()=>RemoveItem(roomImage)">Delete</button>
                                        </div>
                                        serial++;
                                    }
                                }
                            </div>
                        </div>


                        <div class="form-group">
                            <button class="btn btn-primary">@Title Room</button>
                            <NavLink href="hotel-room" class="btn btn-secondary">Back to Index</NavLink>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>-->

<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 ml-3">@Title Hotel Room</h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="HotelRoomModel" OnValidSubmit="HandleHotelRoomUpsert">
                    <DataAnnotationsValidator />
                    @*<ValidationSummary />*@
                    <div class="form-group">
                        <label>Name</label>
                        <InputText @bind-Value="HotelRoomModel.Name" class="form-control"></InputText>
                        <ValidationMessage For="()=>HotelRoomModel.Name"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Occupancy</label>
                        <InputNumber @bind-Value="HotelRoomModel.Occupancy" class="form-control"></InputNumber>
                        <ValidationMessage For="()=>HotelRoomModel.Occupancy"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Rate</label>
                        <InputNumber @bind-Value="HotelRoomModel.RegularRate" class="form-control"></InputNumber>
                        <ValidationMessage For="()=>HotelRoomModel.RegularRate"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Sq ft.</label>
                        <InputText @bind-Value="HotelRoomModel.SqFt" class="form-control"></InputText>
                    </div>
                    <div class="form-group" style="height:250px;">
                        <label>Details</label>
                        <InputTextArea @bind-Value="HotelRoomModel.Details" class="form-control"></InputTextArea>



                    </div>
                    <div class="form-group" style="padding-top:70px;">
                        <InputFile OnChange="HandleImageUpload" multiple></InputFile>
                        <div class="row">

                            @if (HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Count > 0)
                            {
                                int serial = 1;
                                foreach (var roomImage in HotelRoomModel.ImageUrls)
                                {
                                    <div class="col-md-2 mt-3">
                                        <div class="room-image" style="background: url('@roomImage') 50% 50%; ">
                                            <span class="room-image-title">@serial</span>
                                        </div>

                                        <button type="button" @onclick="()=>RemoveItem(roomImage)" class="btn btn-outline-danger btn-block mt-4">
                                            Delete
                                        </button>
                                    </div>serial++;
                                }
                            }
                        </div>
                    </div>
                    <div class="form-group">
                        <button class="btn btn-primary">@Title Room</button>
                        <NavLink href="hotel-room" class="btn btn-secondary">Back to Index</NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }
    private HotelRoomDto HotelRoomModel { get; set; } = new HotelRoomDto();
    private HotelRoomImageDto RoomImage { get; set; } = new HotelRoomImageDto();
    private List<string> DeletedImageNames { get; set; } = new List<string>();
    //private HotelRoomDto ToDelete { get; set; } = new HotelRoomDto();
    //private IEnumerable<HotelRoomImageDto> RetrievedPhotos = Enumerable.Empty<HotelRoomImageDto>();

    public string Title { get; set; } = "Create";

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            //updating
            Title = "Update";
            HotelRoomModel = await HotelRoomRepository.GetHotelRoomById(Id.Value);
            if (HotelRoomModel.HotelRoomImages != null)
            {
                HotelRoomModel.ImageUrls = HotelRoomModel.HotelRoomImages.Select(x => x.RoomImageUrl).ToList();
            }
            Console.WriteLine("Deleted items content is: {0}", DeletedImageNames.Count());
            Console.WriteLine("############################");

            //await GetPhotosForRoomById(Id.Value);

        }
        else
        {
            //create
            Title = "Create";
            HotelRoomModel = new HotelRoomDto();

        }


    }

    private async Task HandleHotelRoomUpsert()
    {
        try
        {
            var roomDetailsByName = await HotelRoomRepository.IsRoomUnique(HotelRoomModel.Name, HotelRoomModel.Id);

            if (Title == "Create")
            {
                if (roomDetailsByName != null)
                {
                    await JsRuntime.ToastrError("The room name is duplicated");
                    return;
                }
                var createdResult = await HotelRoomRepository.CreateHotelRoom(HotelRoomModel);
                await AddHotelRoomImage(createdResult);
                await JsRuntime.ToastrSuccess("Room created successful");

                NavigationManager.NavigateTo("hotel-room");
            }

            if (HotelRoomModel.Id != 0 && Title == "Update")
            {
                var updatedResult = await HotelRoomRepository.UpdateHotelRoom(Id.Value, HotelRoomModel);
                if ((HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Any()) || (DeletedImageNames != null && DeletedImageNames.Any()))
                {
                    foreach (var deletedImageName in DeletedImageNames)
                    {
                        var imageUrlFormated = deletedImageName.Substring(deletedImageName.LastIndexOf('/') + 1);
                        FileUpload.DeleteFile(imageUrlFormated);
                        await HotelImagesRepository.DeleteHotelRoomImageByImageUrl(deletedImageName);
                    }
                    await AddHotelRoomImage(updatedResult);
                }
                await JsRuntime.ToastrSuccess("Room updated successful");
                //NavigationManager.NavigateTo("hotel-room");
                await OnInitializedAsync();
            }

        }
        catch (Exception ex)
        {

            Console.WriteLine(ex.Message);
        }
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        try
        {
            var images = new List<string>();
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" ||
                        fileInfo.Extension.ToLower() == ".jpeg" ||
                        fileInfo.Extension.ToLower() == ".png")
                    {
                        var uploadedImagePath = await FileUpload.UploadFile(file);
                        images.Add(uploadedImagePath);
                        //Console.WriteLine(fileInfo.Extension.ToLower());

                    }
                    else
                    {
                        await JsRuntime.ToastrError("Please select .jpg/.jpeg/.png file only");
                    }
                };

                if (images.Any())
                {
                    if (HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Any())
                    {
                        HotelRoomModel.ImageUrls.AddRange(images);
                    }
                    else
                    {
                        HotelRoomModel.ImageUrls = new List<string>();
                        HotelRoomModel.ImageUrls.AddRange(images);

                    }
                }
                else
                {
                    await JsRuntime.ToastrError("Image uploading failed");
                }

            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    private async Task RemoveItem(string imageUrl)
    {
        try
        {
            var imageIndex = HotelRoomModel.ImageUrls.FindIndex(x => x == imageUrl);
            var imageUrlFormated = imageUrl.Substring(imageUrl.LastIndexOf('/') + 1);
            if (Title == "Create")
            {
                FileUpload.DeleteFile(imageUrlFormated);
            }
            else
            {
                DeletedImageNames ??= new List<string>();
                DeletedImageNames.Add(imageUrl);
            }
            HotelRoomModel.ImageUrls.RemoveAt(imageIndex);
            foreach (var item in DeletedImageNames)
            {
                Console.WriteLine("Items to be deleted {0}", item);
            }
            Console.WriteLine("#########################################################");
        }
        catch (Exception ex)
        {

            await JsRuntime.ToastrError(ex.Message);
        }

    }

    private async Task AddHotelRoomImage(HotelRoomDto hotelRoomDto)
    {
        foreach (var imageUrl in HotelRoomModel.ImageUrls)
        {
            if (HotelRoomModel.HotelRoomImages == null || HotelRoomModel.HotelRoomImages.Where(x => x.RoomImageUrl == imageUrl).Count() == 0)
            {
                RoomImage = new HotelRoomImageDto()
                {
                    RoomId = hotelRoomDto.Id,
                    RoomImageUrl = imageUrl
                };
                await HotelImagesRepository.CreateHotelRoomImage(RoomImage);
            }
            else
            {
                //await JsRuntime.ToastrError("Photo duplicated");
            }
        }


    }
}
